- if contest_match.started?
  p.voting-warning
    span.red-warning = t '.warning'
    | &nbsp;
    = t '.warning_text', gender: current_user&.sex

- cache [contest_match, current_user&.sex] do
  .b-contest_match[
    data-model=ContestMatchSerializer.new(contest_match).to_json
    data-page_url=round_match_contest_url(contest_match.round.contest, round: contest_match.round, match_id: contest_match.id)
  ]
    .prev-match
    .next-match
    .current-match
      - if contest_match.right.nil? && contest_match.left.nil?
        .match-members
          .match-member.placeholder
          .vs.empty
            p.not-selected = t '.candidates_not_selected'
          .match-member.placeholder

      - elsif contest_match.right || contest_match.left
        .match-members
          - if contest_match.left
            .match-member[
              class=contest_match.status(contest_match.left_id)
              data-variant='left'
              data-type='json'
              data-method='post'
              data-action=votes_url(votable_id: contest_match.id, votable_type: ContestMatch.name, vote: 'yes')
            ]
              - if contest_match.left.is_a? Anime
                = render partial: 'animes/anime',
                  object: contest_match.left,
                  locals: { cover_notice: :studio, content_by: :none }
              - else
                = render partial: 'characters/character',
                  object: contest_match.left,
                  locals: { content_by: :none }
          - else
            .match-member.placeholder

          .vs
            .label vs
            - if contest_match.started?
              p.invitation = t '.click_candidate'
              p.vote-voted = t '.your_vote_counted'
              p.vote-abstained = t '.you_have_abstained_from_voting', gender: current_user&.sex
              .actions
                .action
                  span.abstain[
                    data-type='json'
                    data-method='post'
                    data-remote='true'
                    data-action=votes_url(votable_id: contest_match.id, votable_type: ContestMatch.name, vote: 'abstain')
                  ] = t '.abstain_from_voting'
                .action
                  span.to-next-not-voted = t '.to_the_next_pair'
              p.thanks = t '.thank_you_for_participation'

            - elsif contest_match.finished?
              p.hint = t '.voting_finished'
            - elsif contest_match.freezed?
              p.hint == t '.voting_freezed'
            - else
              p.hint = t '.voting_has_not_begun_yet'

          - if contest_match.right
            .match-member[
              class=contest_match.status(contest_match.right_id)
              data-variant='right'
              data-type='json'
              data-method='post'
              data-action=votes_url(votable_id: contest_match.id, votable_type: ContestMatch.name, vote: 'no')
            ]
              - if contest_match.right.is_a? Anime
                = render partial: 'animes/anime',
                  object: contest_match.right,
                  locals: { cover_notice: :studio, content_by: :none }
              - else
                = render partial: 'characters/character',
                  object: contest_match.right,
                  locals: { content_by: :none }
          - else
            .match-member.placeholder

        - if contest_match.round.number > 1 && (contest_match.defeated_by(contest_match.left, contest_match.round) + contest_match.defeated_by(contest_match.right, contest_match.round)).any?
          .match-losers.cc
            = render partial: 'contest_matches/losers',
              object: contest_match.defeated_by(contest_match.left, contest_match.round.prior_round),
              locals: { position: 'left' }
            = render partial: 'contest_matches/losers',
              object: contest_match.defeated_by(contest_match.right, contest_match.round.prior_round),
              locals: { position: 'right' }

        - if contest_match.finished?
          .votes-percents
            .left-part title="#{contest_match.left_votes} #{i18n_i 'vote', contest_match.left_votes} #{t '.for'} «#{contest_match.left&.name || t('is_deleted')}»"
              span #{contest_match.left_percent}% (#{contest_match.left_votes})
              .right-part[
                style="width: #{[[contest_match.right_votes.to_f / ([contest_match.left_votes + contest_match.right_votes, 1].max) * 100 - 0.75, 4].max, 95].min}%"
                title="#{contest_match.right_votes} #{i18n_i 'vote', contest_match.right_votes} #{t '.for'} «#{contest_match.right&.name || t('is_deleted')}»"
              ]
                span #{contest_match.right_percent}% (#{contest_match.right_votes})

      - else
        center
          .match-members
            .match-member.voted[
              data-variant='left'
            ]
              - if contest_match.left.is_a? Anime
                = render partial: 'animes/anime',
                  object: contest_match.left,
                  locals: { cover_notice: :studio, content_by: :none }
              - else
                = render partial: 'characters/character',
                  object: contest_match.left,
                  locals: { content_by: :none }

          - if contest_match.defeated_by(contest_match.left, contest_match.round).any?
            .match-losers
              = render 'contest_matches/losers',
                losers: contest_match.defeated_by(contest_match.left, contest_match.round),
                position: 'center'
