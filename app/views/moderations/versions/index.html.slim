header.head
  h1 = og.headline
  p.notice = t '.notice'
  = render 'application/breadcrumbs'

.block
  .subheadline = t '.moderators'
  .moderators
    = render partial: 'users/user',
      collection: @view.moderators,
      locals: { content_by: :named_avatar }

  - if can?(:filter, Version) && @view.rules_club_page_id
    = render 'application/note_from_club_page',
      club_page_id: @view.rules_club_page_id

  / .subheadline = t '.instruction'
  / p.m5 = t '.instructions_notice'

  / = render partial: 'users/user',
  /   collection: @view.moderators,
  /   locals: { content_by: :named_avatar }

/ - unless params[:type] == 'anime_video'
/   .block
/     .subheadline = t '.instruction'
/     .b-brief
/       .moderators
/         = render partial: 'users/user',
/           collection: @view.moderators,
/           locals: { content_by: :named_avatar }
/ 
/       ul.b-list.is-wide
/         - t('.instructions').each do |instruction|
/           li: p == instruction
/ 
/         /Отклонять правки на [u]японские[/u] имена, где присутствуют сочетания таких букв как:
/ 
/         /[list]
/         /[*] «тс» (например, в имени [i][b]Ts[/b]ubaki[/i] — «Цубаки», а не «[s]Тс[/s]убаки»),
/         /[*] «оу» (в имени [i]S[b]ou[/b]suke[/i] — «Соскэ», а не «С[s]оу[/s]скэ»),
/         /[*] «юу» (в имени [i]K[b]yuu[/b]suke[/i] — «Кюскэ», а не «К[s]юу[/s]скэ»),
/         /[*] «ёу» (в имени [i]R[b]you[/b]suke[/i] — «Рёскэ», а не «Р[s]ёу[/s]скэ») и.т.п.
/         /[/list]
/ 
/         /Это грубые ошибки при транслитерации, и многие здесь привыкли такое допускать. Я же хочу от этого избавиться.
/         / <span style="padding: 0 3px; color: white; background: red;">новое</span>
/ 
/       p.m5 = t '.instructions_notice'

- if can? :filter, Version
  .block
    .subheadline = t '.filters'
    form.b-form#versions_form[
      action=current_url
      method='get'
    ]
      input#version_user_id[
        type='hidden'
        name='user_id'
        value=params[:user_id]
      ]
      input#version_moderator_id[
        type='hidden'
        name='moderator_id'
        value=params[:moderator_id]
      ]
      input#version_item_type[
        type='hidden'
        name='item_type'
        value=params[:item_type]
      ]
      .block
        .fc-3
          .f-column
            .b-input
              label
                div = Version.human_attribute_name :user_id
                input.user_id-suggest[
                  class=(:hidden if @view.filtered_user)
                  autocompelte='off'
                  data-autocomplete=autocomplete_user_moderations_versions_url(type: params[:type])
                ]
                .placeholder[
                  class=(:hidden unless @view.filtered_user)
                ]
                  span.nickname = @view.filtered_user&.nickname
                  .b-js-action.remove = t('actions.delete').downcase
          .f-column
            .b-input
              label
                div = Version.human_attribute_name :moderator_id
                input.moderator_id-suggest[
                  class=(:hidden if @view.filtered_moderator)
                  data-autocomplete=autocomplete_moderator_moderations_versions_url(type: params[:type])
                ]
                .placeholder[
                  class=(:hidden unless @view.filtered_moderator)
                ]
                  span.nickname = @view.filtered_moderator&.nickname
                  .b-js-action.remove = t('actions.delete').downcase
          .f-column
            .b-input
              label
                div = t '.field'
                select#version_field name='field'
                  option value='' = t '.not_selected'
                  - @view.filterable_options.each do |type, fields|
                    - is_all = type == Moderations::VersionsView::ALL_TYPES
                    optgroup[
                      label=(is_all ? t('.all_types') : type.constantize.model_name.human)
                    ]
                      - fields.each do |field, label|
                        option[
                          value=field
                          selected=(params[:field] === field && ((is_all && params[:item_type].blank?) || (!is_all && params[:item_type] == type)))
                          data-item_type=(type unless is_all)
                        ]
                          = label
                          - if label != field
                            |  (#{field})

- if @view.pending.any?
  .block
    .b-options-floated
      a.expand-all.b-js-link = t '.expand_all'
    .subheadline.m5
      = t '.queue'
      .misc-links
        a[
          class="sort-#{@view.sort_order}"
          href=current_url(order: @view.sort_order == :asc ? nil : :asc)
        ]
    .block
      - if @view.pending.any?
        = render partial: 'versions/version', collection: @view.pending

        - if @view.pending.next_page?
          = render 'blocks/postloader',
            next_url: current_url(page: @page + 1, is_pending: 1),
            ignore_appear: true

      - else
        .b-nothing_here = t '.queue_empty'

.block
  input.subheadline-input.date-filter[
    type='text'
    data-name='created_on'
    placeholder=t('date_field')
    value=params[:created_on]
  ]
  .subheadline.m5 = t '.history'
  .block
    = render partial: 'versions/version', collection: @view.processed
    - if @view.processed.next_page?
      = render 'blocks/postloader',
        next_url: current_url(page: @page + 1)
