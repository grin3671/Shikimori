= cache [version, can?(:manage, version), can?(:destroy, version), :v5], expires_in: 2.weeks do
  .b-log_entry.mobile-multiline.to-process[
    id=version.id
    data-dynamic='log_entry'
    data-url=moderations_version_url(version)
  ]
    span
      a href=moderations_version_url(version)
        span.id-label #
        = version.id
    span.date
      = version.created_at.strftime('%d.%m.%Y')

    span.author data-text=t('.by')
      = render 'users/user_16', user: version.user

    span.column
      = version.changed_fields.join ', '

    span.id data-text=(version.item.class.model_name.human if version.item)
      - if version.item_type == Poster.name
        = render 'versions/db_entry', version: version, field: :associated
      - elsif version.item
        - if version.item_type == AnimeVideo.name
          = render 'versions/anime_video', version: version
        - elsif version.item_type == Video.name
          = render 'versions/video', version: version
        - elsif [Genre.name, GenreV2.name, Studio.name, Publisher.name].include?(version.item_type)
          = render 'versions/genre_studio_publisher', version: version
        - elsif version.is_a? Versions::RoleVersion
          = render 'users/user_16', user: version.item
        - else
          = render 'versions/db_entry', version: version, field: :item
      - else
        i = t("deleted.#{version.item_type.underscore}").downcase

    span.state[
      class=version.state.downcase
    ]
      = version.aasm.human_state

    - if !version.auto_accepted? && version.moderator.present?
      span
        = render 'users/user_16', user: version.moderator

    .spoiler.collapse: span.action.half-hidden style="display: none;" = t '.show'
    .collapsed.spoiler: span = t '.show_changes'

    .spoiler.target style='display: none;'
      - if can?(:manage, version) || can?(:destroy, version)
        .moderation
          - if can? :manage, version
            - if version.may_accept?
              a.ajax-action[
                href=accept_moderations_version_url(version)
                title=t('.accept_changes')
                data-method='POST'
                data-remote='true'
                data-type='json'
              ] = t '.accept'

            - if version.may_reject?
              a.ajax-action.reject[
                title=t('.reject_changes')
                data-href=reject_moderations_version_url(version)
                data-method='POST'
                data-reason-prompt=t('.reject_reason')
                data-remote='true'
                data-type='json'
              ] = t '.reject'

            - if version.may_accept_taken?
                a.ajax-action[
                  href=accept_taken_moderations_version_url(version)
                  data-direction='top'
                  data-method='POST'
                  data-remote='true'
                  data-type='json'
                ] = t '.taken_to_accepted'

            - if version.may_take_accepted?
                a.ajax-action.b-tooltipped.unprocessed[
                  href=take_accepted_moderations_version_url(version)
                  data-method='POST'
                  data-remote='true'
                  data-type='json'
                ] = t '.accepted_to_taken'

          - if can?(:destroy, version) && version.may_to_deleted?
            a.delete[
              href=moderations_version_url(version)
              title=t('.delete_changes')
              data-confirm="#{t '.delete_changes'}?"
              data-method='DELETE'
              data-remote='true'
              data-type='json'
            ] = t '.delete'

      .change-details
        - if version.reason.present?
          .reason class=(:m15 unless version.item_diff.keys.one?)
            span #{Version.human_attribute_name :reason}:&nbsp;
            = h(version.reason).gsub("\n", '<br>').html_safe

        - if version.is_a? Versions::VideoVersion
          = render 'versions/changes/video', version: version

        - elsif version.is_a? Versions::ScreenshotsVersion
          /# Template Dependency: versions/changes/screenshots_reposition
          /# Template Dependency: versions/changes/screenshots_delete
          /# Template Dependency: versions/changes/screenshots_upload
          = render "versions/changes/screenshots_#{version.action}", version: version

        - elsif version.is_a? Versions::PosterVersion
          = render 'versions/changes/poster', version: version

        - elsif version.is_a? Versions::PosterOldVersion
          = render 'versions/changes/poster_old', version: version

        - elsif version.is_a? Versions::CollectionVersion
          - if version.item_diff['external_links'].present?
            = render 'versions/changes/external_links', version: version
          - else
            - raise 'unknown collection'

        - elsif version.is_a? Versions::RoleVersion
          = render 'versions/changes/role', version: version

        - else
          - version.item_diff.each do |field, (old_value, new_value)|
            = render 'versions/changes/text_diff',
              version: version,
              field: field,
              only_one: version.item_diff.keys.one?
      span[
        prevent-last-child-style-for-previous-element
      ]
